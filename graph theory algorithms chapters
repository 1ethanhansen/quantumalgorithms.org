\section*{Quantum Algorithm (Draft)}

\begin{algorithm}[ht]
	\caption{Minimum-weighted spanning tree} 
	\begin{algorithmic}[1]
		
		\Require Give a quantum access to a connected graph $G = (G, w)$ expressed in adjacency matrix or array model  
		\Ensure	Obtain the edge set $E$ of the minimum-weighted spanning tree
		\vspace{10pt}
		\State Initialize the state $U\ket{0} = \sum_{k = 1}^{N}\ket{T_{j}}$ such that $\ket{T_{j}}$ represents each spanning forest $T_{j}$
		\State Set $k = n$ and $l = 0$
		\State Find $e$ using quantum search algorithm using quantum access to $A$ and the oracle $U_{f_T}$
		\State \textbf{While} $k !=1 $ \textbf{repeat}
		\Statex l = l + 1
		\Statex Initialize $U^{j}\ket{T_{j}} =  \sum_{k = 1}^{N}w_{j}\ket{e_{j}}$
		\Statex Apply \textbf{Find the Minimum} subroutine to find the smallest $w_{j}$ in $T_{j}$
		\Statex Add $e_{j}$ to $E$ corresponds to $w_{j}$ 
		\State \textbf{Until} $k = 1$ or $(l + 2)c\sqrt{km}$
		\State Return the edge set $E$ of a spanning tree $T$
		
	\end{algorithmic}
\end{algorithm}

\newpage
\begin{algorithm}[ht]
	\caption{Connectivity in the adjacency matrix model} 
	\begin{algorithmic}[1]
		
		\Require Given quantum access to an undirected and connected graph $G$ expressed in adjacency matrix $M$ 
		\Ensure	Obtain the edge set $A$ of a spanning tree of $G$
		\vspace{10pt}
		\State Let $A = \emptyset$
		\State Initialize the state $U\ket{0} = \sum_{k = 1}^{N}\ket{C_{j}}$ such that $\ket{C_{j}}$ represents a component from vertex $j$ in $G$ 
		\State \textbf{While} $G$ is not connected \textbf{repeat}
		\Statex Initialize $U^{j}\ket{C_{j}} =  \sum_{k = 1}^{N}\ket{C_{j}}$
		\Statex Apply \textbf{Grover's search algorithm} to find $e_{j}$ such that it connects to a vertex that has not been used in expected $O(n^{2}/t)$ queries and runs forever otherwise. 
		\Statex Adds $e_{j}$ to $A$
		\State \textbf{Until} $G$ is connected
		\State Return the edge set $A$ 
		
	\end{algorithmic}
\end{algorithm}


\newpage

\begin{algorithm}[ht]
	\caption{Classically construct components $C_{k}$ of $G$} 
	\begin{algorithmic}[1]
		
		\Require Given an undirected graph $G$ in the array model 
		\Ensure	Obtain the edge set $A$ that represents components $C_{j}$ of graph $G$ and the number of constructed components $k$
		\vspace{10pt}
		\State Let edge set $A = \emptyset$, set $D = \emptyset$, $k = 0$ be the number of components that are constructed, and $S = V$ be the set of vertices that are not connected to a component 
		\State \textbf{While} $S \neq \emptyset$ 
		\Statex Start with vertex $v$ that has the highest degree in $S$ and add it into $D$ 
		\Statex Add neighboring edges $(v,w)$ of vertices $v$ and $w$ one-by-one into $A$ 
		\Statex \textbf{Until} one of the following occurs:
		\Statex 1) It reaches the end of the list. Set $k = k + 1$, $C_{k} = D$, and remove the elements of $D$ from $S$.
		\Statex 2) Vertex $w$ has already assigned to a component $C_{j}$ where $j \leqslant k$. Add $D$ to $C_{j}$, and remove the elements of $D$ from $S$.  
		\State Return $k$, the edge set $A$, and $C_{1}, C_{2}, ..., C_{k}$
		
	\end{algorithmic}
	\label{algo: constructcomponents}
\end{algorithm}

\begin{algorithm}[ht]
	\caption{Connectivity in the array model} 
	\begin{algorithmic}[1]
		
		\Require Given quantum access to an undirected and connected graph $G$ expressed in the array model 
		\Ensure	Obtain the edge set $A$ of a spanning tree of graph $G$ which implies $G$ is connected 
		\vspace{10pt}
		\State Let edge set $A = \emptyset$
		\State Apply Algorithm \ref{algo: constructcomponents} and add $C_{1}, C_{2}, ..., C_{k}$ into $A$
		\State Initialize the state $U\ket{0} = \sum_{k = 1}^{N}\ket{C_{j}}$
		\State \textbf{While} $G$ is not connected \textbf{repeat}
		\Statex Initialize $U^{j}\ket{C_{j}} =  \sum_{k = 1}^{N}\ket{C_{j}}$
		\Statex Start with $C_{j}$ that has the smallest degree
		\Statex Apply \textbf{Grover's search algorithm} to find an edge $e_{j}$ in $C_{j}$ that connects to a different component in $A$ in expected $O(\sqrt{m_{C}})$ queries where $m_{C}$ denotes the number of edges of component $C$
		\Statex Adds $e_{j}$ to $A$ 
		\State \textbf{Until} $G$ is connected
		\State Return the edge set $A$
		
	\end{algorithmic}
\end{algorithm}
